import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from decouple import config
from openpyxl import Workbook, load_workbook
from datetime import datetime
import os

# FSM –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç –µ –∫–æ–Ω–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
class AdminStates(StatesGroup):
    WAITING_FOR_TITLE = State()
    WAITING_FOR_QUESTIONS = State()

class UserStates(StatesGroup):
    WAITING_FOR_START = State()
    ANSWERING_QUESTIONS = State()

# Logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Config
ADMINS = config("ADMS").split(",")
TOKEN = config("TKN")
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# Runtime state
user_infos = []  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: [{username: ..., fio: ...}]
survey_title = ""  # –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
prepared_questions = []  # –°–ø–∏—Å–æ–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: [(—Ç–∏–ø, –≤–æ–ø—Ä–æ—Å, –æ–ø—Ü–∏–∏)]
user_progress = {}  # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username: current_question_index}
user_results = {}  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {username: [(–≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç, –≤—Ä–µ–º—è)]}
poll_id_to_data = {}  # –î–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞: {poll_id: (username, question_index, question, options)}
admin_chat_id = None  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∞, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –æ–ø—Ä–æ—Å
users_completed = set()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ –æ–ø—Ä–æ—Å
users_total = 0  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def is_admin(message: types.Message):
    logger.debug(f"[RIGHTS]Current user: {message.from_user.username}")
    return message.from_user.username in ADMINS

@dp.startup()
async def setup_commands(bot: Bot):
    commands = [
        types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"),
        types.BotCommand(command="poll", description="–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"),
        types.BotCommand(command="text", description="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"),
        types.BotCommand(command="finish", description="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å"),
        types.BotCommand(command="status", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞"),
    ]
    await bot.set_my_commands(commands)

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    global admin_chat_id
    
    if is_admin(message):
        admin_chat_id = message.chat.id
        await state.set_state(AdminStates.WAITING_FOR_TITLE)
        await message.reply(
            "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
            "üîπ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å—ã —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram.\n"
            "üìù –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:"
        )
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await message.reply(
            "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
            "üîπ –Ø –±–æ—Ç-–æ–ø—Ä–æ—Å–Ω–∏–∫. –ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–Ω–µ—Ç –æ–ø—Ä–æ—Å, "
            "—è –ø—Ä–∏—à–ª—é –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
        )

@dp.message(AdminStates.WAITING_FOR_TITLE)
async def process_title(message: types.Message, state: FSMContext):
    global survey_title, prepared_questions
    
    if not is_admin(message):
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞
    survey_title = message.text.strip()
    prepared_questions = []
    user_results.clear()
    user_progress.clear()
    users_completed.clear()
    
    await state.set_state(AdminStates.WAITING_FOR_QUESTIONS)
    await message.reply(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞: <b>{survey_title}</b>\n\n"
        "üì§ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx) —Å Telegram ID –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ –∏ –§–ò–û –≤–æ –≤—Ç–æ—Ä–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).\n"
        "üó≥ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å—ã:\n"
        "  ‚Äî /poll ‚Äî –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏\n"
        "  ‚Äî /text ‚Äî –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å\n"
        "üìä –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞ ‚Äî /finish\n\n"
        "üëâ Telegram ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞ @username_to_id_bot"
    )

@dp.message(Command("status"))
async def check_status(message: types.Message):
    if not is_admin(message):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not user_infos:
        await message.reply("‚ö†Ô∏è –û–ø—Ä–æ—Å –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    completed = len(users_completed)
    total = len(user_infos)
    remaining = total - completed
    
    completed_list = "\n".join(f"@{username}" for username in users_completed) if users_completed else "–ø–æ–∫–∞ –Ω–∏–∫—Ç–æ"
    
    await message.reply(
        f"üìä –°—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞ <b>{survey_title}</b>:\n\n"
        f"‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª–∏: {completed} –∏–∑ {total} ({completed/total*100:.1f}%)\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {remaining}\n\n"
        f"üë§ –ó–∞–≤–µ—Ä—à–∏–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{completed_list}"
    )

@dp.message(Command("finish"), AdminStates.WAITING_FOR_QUESTIONS)
async def finish_preparation(message: types.Message, state: FSMContext):
    if not is_admin(message):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not user_infos:
        await message.reply("‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    if not prepared_questions:
        await message.reply("‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
        return
    
    global users_total
    users_total = len(user_infos)
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
    success = 0
    fail = 0
    failed_users = []
    
    for info in user_infos:
        username = info["username"][:-2]
        try:
            chat = await bot.get_chat(username)

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="OK, –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="start_survey")]
            ])

            await bot.send_message(
                chat_id=chat.id,
                text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç-–æ–ø—Ä–æ—Å–Ω–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ø–æ —Ç–µ–º–µ: <b>{survey_title}</b>.",
                reply_markup=keyboard
            )

            # ‚úÖ –ü–æ–ª—É—á–∞–µ–º FSM-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_fsm = FSMContext(storage=dp.storage, key=StorageKey(bot_id=bot.id, chat_id=chat.id, user_id=chat.id))
            await user_fsm.set_state(UserStates.WAITING_FOR_START)

            user_progress[username] = 0
            success += 1

        except Exception as e:
            logger.warning(f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ @{username}: {e}")
            failed_users.append(username)
            fail += 1
    
    fail_list = "\n".join(f"@{u}" for u in failed_users) if failed_users else "–Ω–µ—Ç"
    await message.reply(
        f"‚úÖ –û–ø—Ä–æ—Å <b>{survey_title}</b> –∑–∞–ø—É—â–µ–Ω!\n"
        f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {fail}\n\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:\n{fail_list}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø—Ä–æ—Å–∞."
    )
    
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞

@dp.callback_query(F.data == "start_survey")
async def on_start_survey(callback: types.CallbackQuery, state: FSMContext):
    user_id = str(int(callback.from_user.id))  # –∫–ª—é—á –≤ user_progress
    username = callback.from_user.username

    logger.debug(f"[START_SURVEY]User ID: {user_id}, username: {username}")
    print("ALL ANSWERS:", user_progress)
    
    if user_id not in user_progress:
        await callback.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return

    await callback.message.edit_text(callback.message.text)

    await state.set_state(UserStates.ANSWERING_QUESTIONS)

    await send_next_question(callback.message.chat.id, user_id)  # –ø–µ—Ä–µ–¥–∞—ë–º user_id
    await callback.answer()

async def send_next_question(chat_id, user_id: str):
    question_index = user_progress[user_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
    if question_index >= len(prepared_questions):
        await bot.send_message(
            chat_id=chat_id,
            text="‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–ø—Ä–æ—Å–∞."
        )
        
        # –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–µ–≥–æ –æ–ø—Ä–æ—Å
        users_completed.add(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å
        if len(users_completed) == users_total and admin_chat_id:
            await send_results_to_admin()
        
        return

    question_type, question_text, options = prepared_questions[question_index]

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–í–æ–ø—Ä–æ—Å: " –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if question_text.startswith("–í–æ–ø—Ä–æ—Å:"):
        question_text = question_text[8:].strip()

    if question_type == "poll":
        poll = await bot.send_poll(
            chat_id=chat_id,
            question=question_text,
            options=options,
            is_anonymous=False
        )
        poll_id_to_data[poll.poll.id] = (user_id, question_index, question_text, options)

    elif question_type == "text":
        # –ò—â–µ–º fio –ø–æ user_id, –∞ –Ω–µ –ø–æ username
        fio = next(
            (user["fio"] for user in user_infos if str(user.get("user_id")) == user_id),
            None
        )
        greeting = f"{fio}, " if fio else ""
        await bot.send_message(
            chat_id=chat_id,
            text=f"‚úçÔ∏è {greeting}{question_text}"
        )

@dp.poll_answer()
async def handle_poll_answer(poll: types.PollAnswer):
    if poll.poll_id not in poll_id_to_data:
        return
    
    username, question_index, question, options = poll_id_to_data[poll.poll_id]
    answer = options[poll.option_ids[0]] if poll.option_ids else "–ë–µ–∑ –æ—Ç–≤–µ—Ç–∞"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    if username not in user_results:
        user_results[username] = []
    
    user_results[username].append((question, answer, timestamp))
    logger.info(f"{username} ‚Üí '{answer}' –Ω–∞ '{question}'")
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
    user_progress[username] += 1
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        chat = await bot.get_chat(username)
        await send_next_question(chat.id, username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è @{username}: {e}")

@dp.message(UserStates.ANSWERING_QUESTIONS)
async def handle_text_answer(message: types.Message, state: FSMContext):
    username = message.from_user.username
    
    if username not in user_progress:
        return
    
    question_index = user_progress[username]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    if question_index < len(prepared_questions):
        question_type, question, _ = prepared_questions[question_index]
        
        if question_type == "text":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            if username not in user_results:
                user_results[username] = []
            
            user_results[username].append((question, message.text.strip(), timestamp))
            logger.info(f"{username} ‚Üí '{message.text.strip()}' –Ω–∞ '{question}'")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
            user_progress[username] += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            await send_next_question(message.chat.id, username)

@dp.message(F.document, AdminStates.WAITING_FOR_QUESTIONS)
async def handle_excel(message: types.Message):
    if not is_admin(message):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    global user_infos
    doc = message.document
    if not doc.file_name.endswith(".xlsx"):
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ .xlsx —Ñ–∞–π–ª.")
        return
    
    file = await bot.download(doc)
    wb = load_workbook(file)
    ws = wb.active
    
    user_infos = []
    for row in ws.iter_rows(min_row=2, values_only=True):
        username = str(row[0]).strip().lstrip("@") if row[0] else None
        fio = str(row[1]).strip() if len(row) > 1 and row[1] else None
        if username:
            user_infos.append({"username": username, "fio": fio})
    
    if not user_infos:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü —Å–æ–¥–µ—Ä–∂–∏—Ç Telegram ID.")
        return
    
    await message.reply(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_infos)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥:\nüëâ /poll ‚Äî –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏\nüëâ /text ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")

@dp.message(Command("poll"), AdminStates.WAITING_FOR_QUESTIONS)
async def add_poll_question(message: types.Message):
    if not is_admin(message):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.reply("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–í–æ–ø—Ä–æ—Å: –ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?\n–ö—Ä–∞—Å–Ω—ã–π\n–°–∏–Ω–∏–π\n–ó–µ–ª–µ–Ω—ã–π")

@dp.message(Command("text"), AdminStates.WAITING_FOR_QUESTIONS)
async def add_text_question(message: types.Message):
    if not is_admin(message):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.reply("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<code>–í–æ–ø—Ä–æ—Å: –í–∞—à –≤–æ–ø—Ä–æ—Å</code>")

@dp.message(F.text.startswith("–í–æ–ø—Ä–æ—Å:"), AdminStates.WAITING_FOR_QUESTIONS)
async def process_question(message: types.Message):
    if not is_admin(message):
        return
    
    lines = message.text.strip().split("\n")
    question = lines[0].strip()
    
    if len(lines) > 1:
        # –≠—Ç–æ –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        options = [line.strip() for line in lines[1:] if line.strip()]
        if not options:
            await message.reply("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞.")
            return
        
        prepared_questions.append(("poll", question, options))
        await message.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏: <b>{question}</b>\n–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(options)}\n\n–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(prepared_questions)}")
    
    else:
        # –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        prepared_questions.append(("text", question, []))
        await message.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: <b>{question}</b>\n\n–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(prepared_questions)}")

async def send_results_to_admin():
    if not admin_chat_id:
        logger.error("–ù–µ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return
    
    wb = Workbook()
    ws = wb.active
    ws.title = "Results"
    ws.append(["ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ù–∏–∫–Ω–µ–π–º", "–í–æ–ø—Ä–æ—Å", "–û—Ç–≤–µ—Ç", "–í—Ä–µ–º—è"])
    
    logger.debug(f"user_results before saving: {user_results}")
    
    for username, answers in user_results.items():
        for answer in answers:
            question, response, timestamp = answer
            fio = next((user["fio"] for user in user_infos if user["username"] == username), "Unknown")
            ws.append([username, fio, question, response, timestamp])
    
    file_path = f"results_{survey_title.replace(' ', '_')}.xlsx"
    wb.save(file_path)
    
    await bot.send_document(
        chat_id=admin_chat_id,
        document=FSInputFile(file_path, filename=f"results_{survey_title}.xlsx"),
        caption=f"üìä –ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–∞ <b>{survey_title}</b> - –≤—Å–µ {len(users_completed)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å!"
    )
    os.remove(file_path)

async def main():
    logger.info("Bot is starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())